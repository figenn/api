// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mailer/mailer.go
//
// Generated by this command:
//
//	mockgen -source=internal/mailer/mailer.go -destination=internal/mailer/mocks/mock_mailer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	mailer "figenn/internal/mailer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
	isgomock struct{}
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockMailer) SendMail(ctx context.Context, config mailer.Config) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMail indicates an expected call of SendMail.
func (mr *MockMailerMockRecorder) SendMail(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailer)(nil).SendMail), ctx, config)
}
