// Code generated by MockGen. DO NOT EDIT.
// Source: internal/subscriptions/handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/subscriptions/handler.go -destination=internal/subscriptions/mocks/mock_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	subscriptions "figenn/internal/subscriptions"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionStore is a mock of SubscriptionStore interface.
type MockSubscriptionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStoreMockRecorder
	isgomock struct{}
}

// MockSubscriptionStoreMockRecorder is the mock recorder for MockSubscriptionStore.
type MockSubscriptionStoreMockRecorder struct {
	mock *MockSubscriptionStore
}

// NewMockSubscriptionStore creates a new mock instance.
func NewMockSubscriptionStore(ctrl *gomock.Controller) *MockSubscriptionStore {
	mock := &MockSubscriptionStore{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStore) EXPECT() *MockSubscriptionStoreMockRecorder {
	return m.recorder
}

// CalculateActiveSubscriptions mocks base method.
func (m *MockSubscriptionStore) CalculateActiveSubscriptions(ctx context.Context, userID string, year, month *int) ([]*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateActiveSubscriptions", ctx, userID, year, month)
	ret0, _ := ret[0].([]*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateActiveSubscriptions indicates an expected call of CalculateActiveSubscriptions.
func (mr *MockSubscriptionStoreMockRecorder) CalculateActiveSubscriptions(ctx, userID, year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateActiveSubscriptions", reflect.TypeOf((*MockSubscriptionStore)(nil).CalculateActiveSubscriptions), ctx, userID, year, month)
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionStore) CreateSubscription(ctx context.Context, sub *subscriptions.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionStoreMockRecorder) CreateSubscription(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).CreateSubscription), ctx, sub)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionStore) DeleteSubscription(ctx context.Context, userID, subID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, userID, subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionStoreMockRecorder) DeleteSubscription(ctx, userID, subID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).DeleteSubscription), ctx, userID, subID)
}

// GetActiveSubscriptions mocks base method.
func (m *MockSubscriptionStore) GetActiveSubscriptions(ctx context.Context, userID string, year, month int) ([]*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSubscriptions", ctx, userID, year, month)
	ret0, _ := ret[0].([]*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptions indicates an expected call of GetActiveSubscriptions.
func (mr *MockSubscriptionStoreMockRecorder) GetActiveSubscriptions(ctx, userID, year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptions", reflect.TypeOf((*MockSubscriptionStore)(nil).GetActiveSubscriptions), ctx, userID, year, month)
}

// GetAllSubscriptions mocks base method.
func (m *MockSubscriptionStore) GetAllSubscriptions(ctx context.Context, userID string, limit, offset int) ([]*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions.
func (mr *MockSubscriptionStoreMockRecorder) GetAllSubscriptions(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockSubscriptionStore)(nil).GetAllSubscriptions), ctx, userID, limit, offset)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionStore) GetSubscription(ctx context.Context, userID, subID string) (*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, userID, subID)
	ret0, _ := ret[0].(*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionStoreMockRecorder) GetSubscription(ctx, userID, subID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).GetSubscription), ctx, userID, subID)
}

// GetSubscriptionsByCategory mocks base method.
func (m *MockSubscriptionStore) GetSubscriptionsByCategory(ctx context.Context, userID string) ([]*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByCategory", ctx, userID)
	ret0, _ := ret[0].([]*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByCategory indicates an expected call of GetSubscriptionsByCategory.
func (mr *MockSubscriptionStoreMockRecorder) GetSubscriptionsByCategory(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByCategory", reflect.TypeOf((*MockSubscriptionStore)(nil).GetSubscriptionsByCategory), ctx, userID)
}

// GetUpcomingSubscriptions mocks base method.
func (m *MockSubscriptionStore) GetUpcomingSubscriptions(ctx context.Context, userID string, week int) ([]*subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingSubscriptions", ctx, userID, week)
	ret0, _ := ret[0].([]*subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingSubscriptions indicates an expected call of GetUpcomingSubscriptions.
func (mr *MockSubscriptionStoreMockRecorder) GetUpcomingSubscriptions(ctx, userID, week any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingSubscriptions", reflect.TypeOf((*MockSubscriptionStore)(nil).GetUpcomingSubscriptions), ctx, userID, week)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionStore) UpdateSubscription(ctx context.Context, userID, subID string, req subscriptions.UpdateSubscriptionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, userID, subID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionStoreMockRecorder) UpdateSubscription(ctx, userID, subID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionStore)(nil).UpdateSubscription), ctx, userID, subID, req)
}
