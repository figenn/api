// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/database.go
//
// Generated by this command:
//
//	mockgen -source=internal/database/database.go -destination=internal/database/mocks/mock_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
)

// MockDbService is a mock of DbService interface.
type MockDbService struct {
	ctrl     *gomock.Controller
	recorder *MockDbServiceMockRecorder
	isgomock struct{}
}

// MockDbServiceMockRecorder is the mock recorder for MockDbService.
type MockDbServiceMockRecorder struct {
	mock *MockDbService
}

// NewMockDbService creates a new mock instance.
func NewMockDbService(ctrl *gomock.Controller) *MockDbService {
	mock := &MockDbService{ctrl: ctrl}
	mock.recorder = &MockDbServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbService) EXPECT() *MockDbServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDbService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDbServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbService)(nil).Close))
}

// Health mocks base method.
func (m *MockDbService) Health() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockDbServiceMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDbService)(nil).Health))
}

// Pool mocks base method.
func (m *MockDbService) Pool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockDbServiceMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockDbService)(nil).Pool))
}
