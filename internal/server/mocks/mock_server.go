// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/server.go
//
// Generated by this command:
//
//	mockgen -source=internal/server/server.go -destination=internal/server/mocks/mock_server.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerStorer is a mock of ServerStorer interface.
type MockServerStorer struct {
	ctrl     *gomock.Controller
	recorder *MockServerStorerMockRecorder
	isgomock struct{}
}

// MockServerStorerMockRecorder is the mock recorder for MockServerStorer.
type MockServerStorerMockRecorder struct {
	mock *MockServerStorer
}

// NewMockServerStorer creates a new mock instance.
func NewMockServerStorer(ctrl *gomock.Controller) *MockServerStorer {
	mock := &MockServerStorer{ctrl: ctrl}
	mock.recorder = &MockServerStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStorer) EXPECT() *MockServerStorerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockServerStorer) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockServerStorerMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockServerStorer)(nil).Health))
}
